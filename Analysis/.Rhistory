l <- map(l, merge)
l <- list.group(l, Target)
# Define plot functions
plot <- ggplot()
drawplot <- function (list) {
line <- geom_line(data = list[[1]], aes(x = value.x, y = value.y))
}
ap.layer <- function (list) {
plot$layers <- list.append(plot$layers, list)
}
all.plot <- function (list) {
plot$layers <- list()
lines <- map(list, drawplot)
plot$layers <- unlist(map(lines, ap.layer))
plot <- plot +
ylim(-1, 13) +
xlab("Temperature (ºC)") +
ylab("Normalized Reporter (Rn)") +
labs(title = paste0(list[[1]][[2]][1,2], " Melt Curve"),
caption = paste0(
"Gl_ID: ", list[[1]][[2]][1,2], "\n\n",
"Tm1: ", round(list[[1]][[2]][1,4], digit = 2), "\n",
"Tm2: ", round(list[[1]][[2]][1,5], digit = 2), "\n",
"70ºC Signal (Rn): ", round(list[[1]][[2]][1,6], digit = 2), "\n",
"M77/70: ", round(list[[1]][[2]][1,9], digit = 4)*100, "%\n", "\n",
"Double Infection: ", list[[1]][[2]][1,7], "\n",
"Inhibited Reading Counts: ", list[[1]][[2]][1,8], "\n\n",
"Suggest Result: ", list[[1]][[2]][1,10], "\n"
),
) +
theme_USGS_box() +
theme(plot.caption.position = "panel",
aspect.ratio = 1,
plot.caption = element_text(hjust = 0))
return(plot)
plot$layers <- list()
}
# Draw plots
mcplots <- map(l, all.plot)
#### Plots Amp ####
# Reshape melt data
colnames(ampl)[1] <- "Well_name"
ampl <- left_join(ampl, select(output, c(1,2,4)))
ampl <- dlply(ampl,.(Well), list)
ampl <- map2(ampl,linfo,list)
# Group list of wells by samples
merge <- function(list) {
list.append(list, Target = as.character(list[[1]][[1]][1,7]))
}
ampl <- map(ampl, merge)
ampl <- list.group(ampl, Target)
# Define plot functions
plota <- ggplot()
drawplot.a <- function (list) {
linea <- geom_line(data = list[[1]][[1]], aes(x = Cycle, y = ΔRn))
}
ap.layer.a <- function (list) {
plota$layers <- list.append(plota$layers, list)
}
all.plot.a <- function (list) {
plota$layers <- list()
linesa <- map(list, drawplot.a)
plota$layers <- unlist(map(linesa, ap.layer.a))
plota <- plota +
scale_y_log10(limits = c(1e-5, 1e2)) +
xlab("Cycle") +
ylab("Normalized Reporter (Rn)") +
labs(title = paste0("Amplification Plot"),
caption = paste0(
"Ct: ", round(list[[1]][[2]][3], digit = 2), "\n",
"Initial Target Copies: ", list[[1]][[2]][11], "\n"
)) +
theme_USGS_box() +
theme(plot.caption.position = "panel",
aspect.ratio = 1,
plot.caption = element_text(hjust = 0))
return(plota)
plota$layers <- list()
}
# Draw plots
amplots <- map(ampl, all.plot.a)
#### Plots info ####
lgd <- ggplot()+
labs(title = paste0("Evaluation Code Inspection Infos"),
caption = paste0("\n","1.Digit","\n",
"1,5: M77/70 too high; 2,6: M77/70 too low","\n\n",
"2. Digit","\n",
"1,3,5,6,7,9,11,13,14,15: wA1 involving DB","\n\n",
"3. Digit","\n",
"1: iM70 too high; 2: Ct too low; 3: iM70 too high, Ct too low"),
) +
theme_USGS_box() +
theme(plot.caption.position = "panel",
aspect.ratio = 0.01,
plot.caption = element_text(hjust = 0))
#### Export ####
# Export Report
sreport[6:10] <- round(sreport[6:10], digit = 2)
sreport <- sreport %>% mutate(Status = "raw")
write.csv(sreport, file = as.character(paste0("Evaluation/",plate_no, " Evaluation Results.csv")))
# Export plots
combinelist <- function (list1, list2) {
list(list1, list2)
}
allplots <- map2(mcplots, amplots, combinelist)
combineplots <- function (list) {
cp <- ggarrange(list[[1]], list[[2]], align = "h")
return(cp)
}
allplots <- map(allplots, combineplots)
pagealn <- function(plt) {
plt <- plt + theme(aspect.ratio = 0.8)
}
allplots <- map(allplots, pagealn)
allplots <- list.append(allplots, lgd)
ggsave(file=as.character(paste0("Evaluation/",plate_no, " Amplification and Melt Curve Plots.pdf")), marrangeGrob(grobs = allplots, nrow = 2, ncol = 1, top = NULL), width = 210, height = 297, units = "mm", device = "pdf")
print(paste0("Evaluation of Plate No. ", plate_no, " has been succesfully completed."))
ne8
#0503
ne8 <- mcplots[[24]]
ne8
#### Setup ####
# Make sure all the dependencies are installed before running the script
library(readxl)
library(plyr)
library(purrr)
library(rlist)
library(dplyr)
library(ggplot2)
library(tidyr)
library(stringr)
library(ggpubr)
library(gridExtra)
library(knitr)
# Set working directory to current location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Manually create a new folder called "Evaluation", all the report files will be exported there
# Set path to xls.-file generated from StepOne software
file.xls.report <- "/Users/hu_zhehao/Library/Mobile Documents/com~apple~CloudDocs/UHH/B.Sc. Biologie/Bachelorarbeit/Doku/qPCR/20230504.xls"
# Set the Plate Number (will be used for Gl_ID and file names)
plate_no <- 20230504
# Standard curve parameters:
slope.a1 <- -3.595
y_intcpt.a1 <- 39.274
eff.a1 <- 89.732
slope.a2b <- -3.531
y_intcpt.a2b <- 39.951
eff.a2b <- 91.994
#### Import ####
# Melt norm Data import
Mc.norm.raw <- as_tibble(readxl::read_xls(file.xls.report, sheet = "Melt Region Normalized Data", range = "A8:DQ104")) %>% select(-c(3,4)) %>% drop_na()
colnames(Mc.norm.raw)[c(1,2)] <- c("Well","Well_name")
# Melt derv Data import
Mc.drv.raw <- as_tibble(readxl::read_xls(file.xls.report, sheet = "Melt Region Derivative Data", range = "A8:DQ104")) %>% select(-c(3,4)) %>% drop_na()
colnames(Mc.drv.raw)[c(1,2)] <- c("Well","Well_name")
# Melt temp Data import
Mc.temp.raw <- as_tibble(readxl::read_xls(file.xls.report, sheet = "Melt Region Temperature Data", range = "A8:DQ104")) %>% select(-c(3,4)) %>% drop_na()
colnames(Mc.temp.raw)[c(1,2)] <- c("Well","Well_name")
# Import result table
output <- as_tibble(readxl::read_xls(file.xls.report, sheet = "Results", range = "A8:S104"))
colnames(output)[c(1,3,7,8)] <- c("Well_name","Sample","Ct","Ct_Mean")
# set well no. in output
output <- left_join(Mc.temp.raw[,c(1,2)],output, by = "Well_name")
# Import amplification data
ampl <- as_tibble(readxl::read_xls(file.xls.report, sheet = "Amplification Data", range = "A8:E3848")) %>% drop_na()
# aes setups
theme_USGS_box <- function(base_family = "serif", ...){
theme_bw(base_family = base_family, ...) +
theme(
plot.title = element_text(size = 12),
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10),
axis.text = element_text(size = 10),
plot.caption = element_text(size = 10),
axis.ticks.length = unit(-0.05, "in"),
axis.text.y = element_text(margin=unit(c(0.3,0.3,0.3,0.3), "cm")),
axis.text.x = element_text(margin=unit(c(0.3,0.3,0.3,0.3), "cm")),
axis.ticks.x = element_blank(),
legend.background = element_rect(color = "black", fill = "white"),
panel.background = element_rect(fill = "grey96", colour = "grey20"),
)
}
#### Data preperation ####
# Find NTC
output <- output %>% mutate(`Sample` = case_when(
Task == "NTC" ~ "NTC",
.default = `Sample`
))
# Assign global sample ID
output <- output %>%
mutate(Gl_ID = case_when(
str_detect(Sample, "Sample ") ~ paste0(plate_no, sprintf('%02d', as.numeric(gsub("Sample ", "", Sample)))),
.default = paste0(plate_no, "_", Sample))
) %>%
relocate(Gl_ID, .before = Sample)
# Initial melt curve signal
output <- left_join(output,Mc.norm.raw[,c(2,3)], by = "Well_name")
colnames(output)[22] <- "iM60"
# 74-peak initial signal (Reading 34: 70.1ºC)
output <- left_join(output,Mc.norm.raw[,c(2,36)], by = "Well_name")
colnames(output)[23] <- "iM70"
# wa1 involving DB-drop signal (Reading 40: 72ºC)
output <- left_join(output,Mc.norm.raw[,c(2,42)], by = "Well_name")
colnames(output)[24] <- "iM72"
# 79-peak initial signal (Reading 58: 77.3ºC)
output <- left_join(output,Mc.norm.raw[,c(2,60)], by = "Well_name")
colnames(output)[25] <- "iM77"
# 79-drop percentage
output <- output %>% mutate(M77_70 = iM77/iM70)
# Find DB drops
neg.readings <- rowSums(Mc.drv.raw[c(3:43)] < 0)
DB <- neg.readings > 0
output <- left_join(output,as_tibble(data.frame(Mc.drv.raw[,2],DB,neg.readings)), by = "Well_name")
# 79-peak percentage of initial signal
output <- output %>% mutate(M77_70 = iM77/iM70)
# detecting wa1-involving anomalies
wa1DB <- output$iM72 < output$iM77
output <- left_join(output,as_tibble(data.frame(wa1DB, Mc.drv.raw[,2])), by = "Well_name")
# Generate tabular report
output <- output %>% mutate(Tm2 = case_when(is.na(Tm2)~0,.default = Tm2))
sreport <- output %>%
group_by(Gl_ID) %>%
reframe(
Sample = Sample,
Ct_Mean = mean(Ct_Mean),
Tm1 = median(Tm1),
Tm2 = median(Tm2),
iM60 = median(`iM60`),
iM70 = median(`iM70`),
iM72 = median(`iM72`),
iM77 = median(`iM77`),
M77_70 = median(`M77_70`),
DB = DB,
wa1DB = wa1DB,
neg.readings = median(neg.readings)
) %>% unique()
output <- output %>% mutate(Tm2 = case_when(Tm2 == 0 ~ NA,.default = Tm2))
sreport[c(3:6)] <- round(sreport[c(3:6)], digits = 2)
sreport <- sreport %>% mutate(Tm2 = case_when(Tm2 == 0 ~ NA,.default = Tm2))
#### Evaluation ####
# 1.algorithm: positive or negative?
sreport <- sreport %>% mutate(agr1 =  0 +
ifelse(!is.na(Tm2), 4, 0) +
ifelse(Tm1 > 77.5, 2, 0) +
ifelse(M77_70 > 0.6, 1, 0)
)
eva1 <- as_tibble(data.frame(agr1=c(0:7),eva1=c("Negative", rep("Inspect", 2), "Quantify", "Negative", rep("Inspect", 2), "Positive")))
sreport <- left_join(sreport, eva1, by = "agr1")
# 2.algorithm: infection type
sreport <- sreport %>% mutate(agr2 =  0+
ifelse(Tm1 > 79.5, 4, 0) +
ifelse(DB == TRUE, 2, 0) +
ifelse(iM72 < iM77, 1, 0)
)
eva2 <- as_tibble(data.frame(agr2=c(0:7),eva2=c("wA2/wB", "Inspect", "wA2 + wB", "Inspect", "wA1", rep("Inspect",3))))
sreport <- left_join(sreport, eva2, by = "agr2")
# 3.algorithm: negative double check
sreport <- sreport %>% mutate(agr3 =  0+
ifelse(Ct_Mean < 30, 2, 0) +
ifelse(iM70>5.3, 1, 0)
)
eva3 <- as_tibble(data.frame(agr3=c(0:3),eva3=c("Negative", rep("Inspect",3))))
sreport <- left_join(sreport, eva3, by = "agr3")
# Summarize result
sreport <- sreport %>% mutate(`Suggest result` = case_when(
eva1 == "Negative" ~ eva1,
eva1 == "Quantify" | eva1 == "Positive" ~ eva2,
eva1 == "Inspect" ~ "Inspection required",
.default = "ERROR"
)) %>% mutate(Warning = case_when(
eva1 == "Negative" & eva3 == "Inspect" ~ "Inspection suggested",
eva1 == "Positive" ~ "Quntification inaccurate"
))
# Calculate initial target copies
sreport <- sreport %>% mutate(`Initial target copies` = case_when(
eva1 == "Quantify" ~ case_when(
eva2 == "wA1" ~ formatC(round(((10^(-1/slope.a1))^(y_intcpt.a1-Ct_Mean))*100, digit = 0), format = "e", digits = 2),
.default = formatC(round(((10^(-1/slope.a2b))^(y_intcpt.a2b-Ct_Mean))*100, digit = 0), format = "e", digits = 2)
)
))
# Clean up evaluation ram
sreport <- sreport %>% mutate(EvaluationCode = paste0(agr1,"_",agr2,"_",agr3))
sreport <- sreport %>% select(-c("agr1", "agr2", "agr3", "eva1", "eva2", "eva3"))
#### Plots N Mc ####
# Reshape melt data: Make a list of every well with it's melt curve raw data
gthr <- function (df) {
gather(df)[-1,]
}
l.temp <- dlply(Mc.temp.raw[,-c(2)],.(Well), gthr)
l.norm <- dlply(Mc.norm.raw[,-c(2)],.(Well), gthr)
l <- map2(l.temp, l.norm, left_join, by = "key")
# add result summarise to each list
linfo <- select(
left_join(select(output, c("Gl_ID", "Well")), select(sreport, c("Gl_ID", "Ct_Mean","Tm1", "Tm2", "iM70", "DB", "neg.readings", "M77_70", "Suggest result","Initial target copies")), by = "Gl_ID"),
c("Well","Gl_ID","Ct_Mean", "Tm1", "Tm2", "iM70", "DB", "neg.readings", "M77_70", "Suggest result","Initial target copies"))
linfo <- dlply(linfo,.(Well))
l <- map2(l,linfo,list)
# Group list of wells by samples
merge <- function(list) {
list.append(list, Target = as.character(list[[2]][1,2]))
}
l <- map(l, merge)
l <- list.group(l, Target)
# Define plot functions
plot <- ggplot()
drawplot <- function (list) {
line <- geom_line(data = list[[1]], aes(x = value.x, y = value.y))
}
ap.layer <- function (list) {
plot$layers <- list.append(plot$layers, list)
}
all.plot <- function (list) {
plot$layers <- list()
lines <- map(list, drawplot)
plot$layers <- unlist(map(lines, ap.layer))
plot <- plot +
ylim(-1, 13) +
xlab("Temperature (ºC)") +
ylab("Normalized Reporter (Rn)") +
labs(title = paste0(list[[1]][[2]][1,2], " Melt Curve"),
caption = paste0(
"Gl_ID: ", list[[1]][[2]][1,2], "\n\n",
"Tm1: ", round(list[[1]][[2]][1,4], digit = 2), "\n",
"Tm2: ", round(list[[1]][[2]][1,5], digit = 2), "\n",
"70ºC Signal (Rn): ", round(list[[1]][[2]][1,6], digit = 2), "\n",
"M77/70: ", round(list[[1]][[2]][1,9], digit = 4)*100, "%\n", "\n",
"Double Infection: ", list[[1]][[2]][1,7], "\n",
"Inhibited Reading Counts: ", list[[1]][[2]][1,8], "\n\n",
"Suggest Result: ", list[[1]][[2]][1,10], "\n"
),
) +
theme_USGS_box() +
theme(plot.caption.position = "panel",
aspect.ratio = 1,
plot.caption = element_text(hjust = 0))
return(plot)
plot$layers <- list()
}
# Draw plots
mcplots <- map(l, all.plot)
#### Plots Amp ####
# Reshape melt data
colnames(ampl)[1] <- "Well_name"
ampl <- left_join(ampl, select(output, c(1,2,4)))
ampl <- dlply(ampl,.(Well), list)
ampl <- map2(ampl,linfo,list)
# Group list of wells by samples
merge <- function(list) {
list.append(list, Target = as.character(list[[1]][[1]][1,7]))
}
ampl <- map(ampl, merge)
ampl <- list.group(ampl, Target)
# Define plot functions
plota <- ggplot()
drawplot.a <- function (list) {
linea <- geom_line(data = list[[1]][[1]], aes(x = Cycle, y = ΔRn))
}
ap.layer.a <- function (list) {
plota$layers <- list.append(plota$layers, list)
}
all.plot.a <- function (list) {
plota$layers <- list()
linesa <- map(list, drawplot.a)
plota$layers <- unlist(map(linesa, ap.layer.a))
plota <- plota +
scale_y_log10(limits = c(1e-5, 1e2)) +
xlab("Cycle") +
ylab("Normalized Reporter (Rn)") +
labs(title = paste0("Amplification Plot"),
caption = paste0(
"Ct: ", round(list[[1]][[2]][3], digit = 2), "\n",
"Initial Target Copies: ", list[[1]][[2]][11], "\n"
)) +
theme_USGS_box() +
theme(plot.caption.position = "panel",
aspect.ratio = 1,
plot.caption = element_text(hjust = 0))
return(plota)
plota$layers <- list()
}
# Draw plots
amplots <- map(ampl, all.plot.a)
#### Plots info ####
lgd <- ggplot()+
labs(title = paste0("Evaluation Code Inspection Infos"),
caption = paste0("\n","1.Digit","\n",
"1,5: M77/70 too high; 2,6: M77/70 too low","\n\n",
"2. Digit","\n",
"1,3,5,6,7,9,11,13,14,15: wA1 involving DB","\n\n",
"3. Digit","\n",
"1: iM70 too high; 2: Ct too low; 3: iM70 too high, Ct too low"),
) +
theme_USGS_box() +
theme(plot.caption.position = "panel",
aspect.ratio = 0.01,
plot.caption = element_text(hjust = 0))
#### Export ####
# Export Report
sreport[6:10] <- round(sreport[6:10], digit = 2)
sreport <- sreport %>% mutate(Status = "raw")
write.csv(sreport, file = as.character(paste0("Evaluation/",plate_no, " Evaluation Results.csv")))
# Export plots
combinelist <- function (list1, list2) {
list(list1, list2)
}
allplots <- map2(mcplots, amplots, combinelist)
combineplots <- function (list) {
cp <- ggarrange(list[[1]], list[[2]], align = "h")
return(cp)
}
allplots <- map(allplots, combineplots)
pagealn <- function(plt) {
plt <- plt + theme(aspect.ratio = 0.8)
}
allplots <- map(allplots, pagealn)
allplots <- list.append(allplots, lgd)
ggsave(file=as.character(paste0("Evaluation/",plate_no, " Amplification and Melt Curve Plots.pdf")), marrangeGrob(grobs = allplots, nrow = 2, ncol = 1, top = NULL), width = 210, height = 297, units = "mm", device = "pdf")
print(paste0("Evaluation of Plate No. ", plate_no, " has been succesfully completed."))
pev60 <- mcplots[[26]]
pev60
theme.example <- function() {
labs(title = "", caption = "")
}
#### HT1* exceptions ####
ne8 +
theme.example()
library(readxl)
library(dplyr)
library(ggplot2)
library(ggpattern)
raw <- read_xlsx("/Users/hu_zhehao/Library/Mobile Documents/com~apple~CloudDocs/UHH/B.Sc. Biologie/Bachelorarbeit/DNA Samples/Zhehao_Hu_Bachelorthesis_Data.xlsx", sheet = "Pool Screen", range = "A4:N113") %>% filter(!is.na(`Suggest Result`)) %>% filter(`Suggest Result`!="Anomaly") %>% filter(!is.na(`Haplotype`))
raw <- raw %>% mutate(Haplotype = case_when(
Haplotype == "HT1st" ~ "HT1*",
Haplotype == "HT2/2st" ~ "HT2/2*",
.default = Haplotype
))
raw <- raw %>% mutate(`Suggest Result` = case_when(
`Suggest Result` == "wA2/wB" ~ "wLytA2 / wLytB",
`Suggest Result` == "wA1" ~ "wLytA1",
`Suggest Result` == "wA2 + wB" ~ "wLytA2 + wLytB",
.default = `Suggest Result`
))
raw %>% filter(Haplotype == "HT1*" & `Suggest Result` == "wLytA2 + wLytB")
View(raw %>% filter(Haplotype == "HT1*" & `Suggest Result` == "wLytA2 + wLytB"))
#### HT1* exceptions ####
ne8 +
theme.example() +
labs(title = "19_Ne_8", caption = "Ct = 28.86")
#### HT1* exceptions ####
ne8 <- ne8 +
theme.example() +
labs(title = "19_Ne_8, 115000 copies per μg DNA")
pev60 <- pev60 +
theme.example() +
theme(axis.title.y = element_blank()) +
labs(title = "19 Pev 60, 86100 copies per μg DNA")
ne8
pev60
ggarrange(ne8, pev60, nrow = 1, align = "h")
ggarrange(ne8, pev60, nrow = 1, align = "v")
ht1ex <- ggarrange(ne8, pev60, nrow = 1, align = "v")
View(plot)
ggsave(ht1ex, path = "/Users/hu_zhehao/Library/Mobile Documents/com~apple~CloudDocs/UHH/B.Sc. Biologie/Bachelorarbeit/Data Analysis/Analysis/Plots Scripts/ht1ex.png")
ggsave(ht1ex, path = "/Users/hu_zhehao/Library/Mobile Documents/com~apple~CloudDocs/UHH/B.Sc. Biologie/Bachelorarbeit/Data Analysis/Analysis/Plots Scripts/ht1ex.png")
ggsave(ht1ex, file = "/Users/hu_zhehao/Library/Mobile Documents/com~apple~CloudDocs/UHH/B.Sc. Biologie/Bachelorarbeit/Data Analysis/Analysis/Plots Scripts/ht1ex.png")
ggsave(ht1ex, file = "/Users/hu_zhehao/Library/Mobile Documents/com~apple~CloudDocs/UHH/B.Sc. Biologie/Bachelorarbeit/Data Analysis/Analysis/Plots Scripts/ht1ex.png", height = 5, width = 3)
ggsave(ht1ex, file = "/Users/hu_zhehao/Library/Mobile Documents/com~apple~CloudDocs/UHH/B.Sc. Biologie/Bachelorarbeit/Data Analysis/Analysis/Plots Scripts/ht1ex.png", height = 7, width = 5)
ggsave(ht1ex, file = "/Users/hu_zhehao/Library/Mobile Documents/com~apple~CloudDocs/UHH/B.Sc. Biologie/Bachelorarbeit/Data Analysis/Analysis/Plots Scripts/ht1ex.png", height = 9, width = 7)
library(readxl)
library(dplyr)
library(tidyr)
library(ggpubr)
library(purrr)
# Import Data
raw <- read_xlsx("/Users/hu_zhehao/Library/Mobile Documents/com~apple~CloudDocs/UHH/B.Sc. Biologie/Bachelorarbeit/DNA Samples/Zhehao_Hu_Bachelorthesis_Data.xlsx", sheet = "Reproduction", range = "A3:P61") %>% filter(!is.na(Group))
colnames(raw)[5:16]  <- c("sum_layed","sum_hatched", "sum_grown", "6/27_layed", "6/27_hatched", "6/27_grown","7/4_layed", "7/4_hatched", "7/4_grown","7/11_layed", "7/11_hatched", "7/11_grown")
# calculate hatch rate
raw <- raw %>% mutate(sum_hatch_rate = sum_hatched / sum_layed)
library(ggplot2)
# hatch rate
n_fun.p1 <- function(x){
return(data.frame(y = 1.15,
label = length(x)))
}
n.hatchrate <- c(
'HT1' = "HT1",
'HT1st' = "HT1*",
'HT2/2st' = "HT2/2*"
)
#### Tests ####
library(rstatix)
library(tidyverse)
library(broom)
rp.test <- raw
shapiro <- rp.test %>%
filter(!is.na(Haplotype)) %>%
group_by(Group, Haplotype) %>%
nest() %>%
mutate(Shapiro = map(data, ~shapiro.test(.x$sum_hatch_rate)))
shapiro_g <- shapiro %>%
mutate(shapiro_g = Shapiro %>% map(glance)) %>%
unnest(shapiro_g)
shapiro_g
stat.result <- rp.test %>% ungroup() %>% filter(!is.na(sum_hatch_rate)) %>% group_by(Haplotype) %>% t_test(sum_hatch_rate ~ Group) %>% add_significance()
stat.result
stat.result <- stat.result %>% add_xy_position(x = "Group", dodge = 0.8)
stat.result <- mutate(stat.result, y.position = 1.1)
stat.result <- rp.test %>% ungroup() %>% filter(!is.na(sum_hatch_rate)) %>% group_by(Haplotype) %>% wilcoxon_test(sum_hatch_rate ~ Group) %>% add_significance()
stat.result <- rp.test %>% ungroup() %>% filter(!is.na(sum_hatch_rate)) %>% group_by(Haplotype) %>% wilcox_test(sum_hatch_rate ~ Group) %>% add_significance()
stat.result
stat.result <- stat.result %>% add_xy_position(x = "Group", dodge = 0.8)
stat.result <- mutate(stat.result, y.position = 1.1)
